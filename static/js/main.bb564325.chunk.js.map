{"version":3,"sources":["Context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","payLoad","map","Provider","dispatch","setState","axios","get","response","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","onDeleteClick","a","delete","name","email","phone","className","onClick","aria-hidden","style","cursor","class","float","color","bind","to","marginRight","Contacts","Fragment","Header","branding","href","defaultProps","NotFound","Test","title","body","fetch","then","json","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","App","exact","path","component","About","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb564325.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\n//Variable Creation\r\nconst Context = React.createContext();\r\n\r\n//Creating a reducer\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !==action.payload)\r\n            }\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                /*\r\n                We want to return an object, yet keep the initial\r\n                state, so we want to use the spread operator which is \r\n                very important when you're dealing with immutable states \r\n                */\r\n                contacts: [action.payLoad, ...state.contacts]\r\n            }\r\n\r\n            case 'UPDATE_CONTACT':\r\n              return {\r\n\r\n                /*\r\n                Here we return the state and then we want to use maps to loop through\r\n                and for each contact we check if each contact id matches with the id from \r\n                the payload, and then if it does, we say the contact equals the entire payload\r\n                else, we want it to just insert the contact                  \r\n                */\r\n                    ...state,\r\n                    contacts: state.contacts.map(contact =>\r\n                        contact.id === action.payload.id ? (contact \r\n                            = action.payload) : contact)\r\n                }\r\n            default:\r\n                return state;\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n//Creating a component\r\nexport class Provider extends Component {\r\n    //Using Destructuring, we want to pull this out of contacts\r\nstate =  {\r\n    contacts: [],\r\n\r\n    //A way to call our action, so we use dispatch\r\n    dispatch : action => this.setState(state => reducer(state, action))\r\n};\r\n\r\n\r\n\r\n// We use componentDidMount to make calls or ini context, speaking to the backend\r\nasync componentDidMount() {\r\n    //Using async and await with axios to get data from our rest API\r\n   const response = await axios.get('http://jsonplaceholder.typicode.com/users');\r\n\r\n   this.setState({\r\n       contacts: response.data\r\n   })\r\n\r\n}\r\n\r\n\r\n// // We use componentDidMount to make calls or ini context, speaking to the backend\r\n// componentDidMount() {\r\n//     //Using axios to get data from our rest API\r\n//     axios.get('http://jsonplaceholder.typicode.com/users')\r\n//     .then(response => this.setState({\r\n//         contacts:response.data\r\n//     }))\r\n\r\n// }\r\n\r\n\r\n\r\n\r\nrender() {\r\n\r\n    return (        \r\n    <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n    </Context.Provider>\r\n    )\r\n}\r\n}\r\n\r\n\r\n//Creating a consumer\r\nexport const Consumer = Context.Consumer","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../Context';\r\nimport axios from 'axios'\r\nimport { Link } from \"react-router-dom\"\r\n// Class components\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo:true\r\n    };\r\n\r\nonShowClick = () => {\r\n    /* Updating the state, mind you, state is immutable,\r\n    one cannot directly manipulate it.\r\n    You have to use setState method\r\n    */\r\n\r\n    this.setState({ showContactInfo: !this.state.showContactInfo}); // Changing the state\r\n    // using the !this.showContactInfo, it creates a toggle\r\n}\r\n\r\n\r\n// Here we tweak the onDeleteClick to mimic and\r\n// actual Front-End to Back-End relationship, where\r\n// the Front-End would make HTTP calls to request \r\n// for a Delete\r\n\r\n\r\n//Using Async\r\nonDeleteClick = async (id, dispatch) => {\r\n   // We don't put it into a variable because you're basically\r\n   // not returning anything, it returns an empty array\r\n\r\n    await axios.delete(`http://jsonplaceholder.typicode.com/users/${id}`)\r\n \r\n    dispatch({type: 'DELETE_CONTACT', payload: id});\r\n   \r\n}\r\n\r\n\r\n// onDeleteClick = (id, dispatch) => {\r\n//  axios.delete(`http://jsonplaceholder.typicode.com/users/${id}`)\r\n//  .then(response =>  dispatch({type: 'DELETE_CONTACT', payload: id}));\r\n   \r\n// }\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact; //Non-Destructuring\r\n        const   { showContactInfo } = this.state\r\n\r\n\r\n\r\n        return (\r\n\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n\r\n                    return (\r\n\r\n                        <div className=\"card card-body mb-3\">\r\n                        <h4>{name}{' '}\r\n                        <i \r\n                        onClick={this.onShowClick}\r\n                        className=\"fa fa-sort-down\" aria-hidden=\"true\"\r\n                        style = {{cursor: 'pointer'}}\r\n                        />\r\n\r\n\r\n                        <i class=\"fa fa-times\" aria-hidden=\"true\" style={{cursor : 'pointer', float : 'right', color: 'red'}}\r\n                        onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                        />\r\n                        \r\n                        <Link to={`contact/edit/${id}`}>\r\n                            <i \r\n                            className=\"fas fa-pencil-alt\"\r\n                            style={{\r\n                                cursor: 'pointer',\r\n                                float: 'right',\r\n                                color: 'black',\r\n                                marginRight: '1rem'\r\n\r\n                            }}\r\n                            ></i> \r\n                        </Link>\r\n                        </h4>\r\n                        {showContactInfo ? ( <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\">Email: {email}</li>\r\n                            <li className=\"list-group-item\">Phone: {phone}</li>\r\n                        </ul>) : null}\r\n                       \r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\n//setting the propTypes\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer} from '../../Context';\r\n\r\nclass Contacts extends Component {\r\n\r\n\r\nrender() {\r\n\r\n    return (\r\n        <Consumer>\r\n            {value => {\r\n                const { contacts } = value;\r\n                return (\r\n                    <React.Fragment>\r\n        <h1 class=\"display-4 mb-2\">\r\n            <span className=\"text-danger\">Contact</span> List\r\n        </h1>\r\n         {contacts.map(contact => (\r\n             <Contact\r\n                 key={contact.id}\r\n                //  name={contact.name}\r\n                //  email={contact.email}\r\n                //  phone={contact.phone}\r\n                 contact={contact}\r\n               \r\n            />\r\n         ))}\r\n            </React.Fragment>\r\n                )\r\n            }}\r\n        </Consumer>\r\n    )\r\n\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// Functional Component\r\n\r\nconst Header = props =>{\r\n    const { branding } = props; //Destructuring\r\n    return (\r\n        <nav class=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n              <a href=\"/\" className=\"navbar-brand\">\r\n                  {branding}\r\n              </a>\r\n              <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                    <li class=\"nav-item\">\r\n                        <Link to=\"/\" class=\"nav-link\">\r\n                            <i class=\"fas fa-home\"></i> Home\r\n                        </Link>\r\n                    </li>                            \r\n                    <li class=\"nav-item\">\r\n                        <Link to=\"/contact/add\" class=\"nav-link\">\r\n                        <i class=\"fas fa-plus\"></i> Add\r\n                        </Link>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <Link to=\"/about\" class=\"nav-link\">\r\n                        <i class=\"fas fa-question\"></i> About\r\n                        </Link>\r\n                    </li>\r\n                    </ul>\r\n              </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\n//Default Props\r\nHeader.defaultProps = {\r\n    branding: \"My App\"\r\n}\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n}\r\n\r\nconst headingStyle = {\r\n    color: 'green',\r\n    fontSize: '50px'\r\n}\r\nexport default Header;","import React from 'react'\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"display-4\">\r\n            <h1> About Contact Manager </h1>\r\n            <p className=\"lead\">Simple App to manage contacts</p>\r\n            <p className= \"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span>, wahala be like bicycle</h1>\r\n            <p className=\"lead\">Your Village People Misdirected you</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass Test extends Component {\r\n    //Axios is a small library used to deal with HTTP\r\n\r\n    state ={\r\n        title: '',\r\n        body: ''\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n      fetch('https://jsonplaceholder.typicode.com/todos/1')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({\r\n          title: data.title,\r\n          body: data.body\r\n      }))\r\n    }\r\n\r\n    // componentWillMount() {\r\n    //     console.log('componentWillMount... ')\r\n    // }\r\n\r\n    // componentDidUpdate() {\r\n    //     console.log('componentDid Update... ')\r\n    // }\r\n\r\n    // componentWillUpdate() {\r\n    //     console.log('componentWillUpdate... ')\r\n    // }\r\n\r\n    // componentWillReceiveProps(nextProps, nextState) {\r\n    //     console.log('componentWillReceiveProps... ')\r\n    //     // Used with Redux, like when you component receives\r\n    //     // new props. In Redux you can change a state to a props\r\n    // }\r\n\r\n\r\n    render() {\r\n        const { title, body } = this.state; \r\n        return <div>\r\n            <h1>{ title }</h1> \r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Test;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n// Creating the container (so to speak) that handles the business of validation\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n        <label htmlFor={name}>{label}</label>\r\n        <input type={type} \r\n        name={name}\r\n        className={classnames(\"form-control form-control-lg\", {'is-invalid': error \r\n        })}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange} //This gets the actual value for each field specified\r\n      />\r\n        {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        \r\n      </div> \r\n    )\r\n}\r\n\r\n//Specifying PropTypes\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\n//Saves the default Props of all inputs as Text, with exception of the email input.\r\nTextInputGroup.defaultProps = {\r\n    type: \"text\"\r\n}\r\nexport default TextInputGroup;","/* \r\nNow to think about adding adding contacts dynamically \r\nCreating a whole seperate component that would house the \r\nform.\r\n\r\nAlso, note that when creating a form\r\neach input is going to be a piece of the\r\nstate.\r\n\r\nWe create the forms input fields using a \r\nbootstrap card.\r\n\r\nNB: When you set a value on a component, it becomes\r\na controlled component, you need to set it to your state\r\nbut you need to add an event handler for the Unchange\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport { Consumer } from '../../Context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n//import { v4 as uuidv4 } from 'uuid';\r\nimport axios from 'axios'\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: ' ',\r\n        email: ' ',\r\n        phone: ' ',\r\n        errors: {\r\n            \r\n        }\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault(); //Preventing the form from submitting to a file\r\n        const { name, email, phone } = this.state;\r\n\r\n        //Check For Errors\r\n\r\n        if(name === '') {\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n\r\n        if(phone === '') {\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        // We take out uuid because jsonPlaceholder has\r\n        // it's own ID structure and it auto-increments\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        // Axios Post calls\r\n\r\n       const response = await axios.post('http://jsonplaceholder.typicode.com/users', newContact)\r\n       dispatch({type: 'ADD_CONTACT', payLoad: response.data })\r\n\r\n        // // Axios Post calls\r\n        // axios.post('http://jsonplaceholder.typicode.com/users', newContact)\r\n        // .then(response =>  dispatch({type: 'ADD_CONTACT', payLoad: response.data }))\r\n\r\n\r\n\r\n        //Clear State after contact submission\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        // To redirect after we have submitted the form,\r\n        // we use:\r\n\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n    render() {\r\n        const { name, email, phone, errors } = this.state // Destructuring\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return ( \r\n                        <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Add Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                        <TextInputGroup \r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter Name\"\r\n                        value={name}\r\n                        onChange={this.onChange}\r\n                        error={errors.name}\r\n                        />\r\n                        <TextInputGroup \r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter Email\"\r\n                        value={email}\r\n                        onChange={this.onChange} \r\n                        type=\"email\"                       \r\n                        error={errors.email}\r\n                        />\r\n                        <TextInputGroup \r\n                        label=\"Phone\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Enter Phone\"\r\n                        value={phone}\r\n                        onChange={this.onChange}                        \r\n                        error={errors.phone}\r\n                        />\r\n\r\n\r\n                    \r\n                    <input type=\"submit\" value=\"Add Contact\" \r\n                    className=\"btn btn-light btn-block\"/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default AddContact;","/* \r\nNow to think about adding adding contacts dynamically \r\nCreating a whole seperate component that would house the \r\nform.\r\n\r\nAlso, note that when creating a form\r\neach input is going to be a piece of the\r\nstate.\r\n\r\nWe create the forms input fields using a \r\nbootstrap card.\r\n\r\nNB: When you set a value on a component, it becomes\r\na controlled component, you need to set it to your state\r\nbut you need to add an event handler for the Unchange\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react'\r\nimport { Consumer } from '../../Context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n//import { v4 as uuidv4 } from 'uuid';\r\nimport axios from 'axios'\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: ' ',\r\n        email: ' ',\r\n        phone: ' ',\r\n        errors: {\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    // We want to be able to call the details of the user\r\n    // that is attached to the \"id\"  being called, these details \r\n    // include Name. Email, and Phone.\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const response = await axios.get(`http://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        // We are going to get back an object, so we can as well as put the \r\n        // response in a variable\r\n\r\n        const contact = response.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault(); //Preventing the form from submitting to a file\r\n        const { name, email, phone } = this.state;\r\n\r\n        //Check For Errors\r\n\r\n        if(name === '') {\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n\r\n        if(phone === '') {\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        // We take out uuid because jsonPlaceholder has\r\n        // it's own ID structure and it auto-increments\r\n        \r\n\r\n        //Creating the update element to use in updating\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        // Sending a put request to the server\r\n        const response =await axios.put(`http://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n\r\n        dispatch({type: 'UPDATE_CONTACT', payload: response.data})\r\n\r\n\r\n\r\n        //Clear State after contact submission\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        // To redirect after we have submitted the form,\r\n        // we use:\r\n\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n    render() {\r\n        const { name, email, phone, errors } = this.state // Destructuring\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return ( \r\n                        <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Edit Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                        <TextInputGroup \r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter Name\"\r\n                        value={name}\r\n                        onChange={this.onChange}\r\n                        error={errors.name}\r\n                        />\r\n                        <TextInputGroup \r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter Email\"\r\n                        value={email}\r\n                        onChange={this.onChange} \r\n                        type=\"email\"                       \r\n                        error={errors.email}\r\n                        />\r\n                        <TextInputGroup \r\n                        label=\"Phone\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Enter Phone\"\r\n                        value={phone}\r\n                        onChange={this.onChange}                        \r\n                        error={errors.phone}\r\n                        />\r\n\r\n\r\n                    \r\n                    <input type=\"submit\" value=\"Update Contact\" \r\n                    className=\"btn btn-light btn-block\"/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default EditContact;","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport multiplyByTwo from './components/Table';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from './Context';\nimport './App.css';\n\n// Dynamic stuff in \nfunction App() {\n\n  return (\n    //Wrapping everything in the provider we created\n    <Provider>\n      <Router>\n\n    <div className=\"App\">\n      <Header branding=\"Contact Managers\"/>\n      <div class=\"container\">\n    <Switch>\n      <Route exact path = \"/\" component={Contacts} />\n      <Route exact path = \"/contact/add\" component={AddContact} />\n      <Route exact path = \"/contact/edit/:id\" component={EditContact} />\n      <Route exact path = \"/About\" component={About} />\n      <Route exact path = \"/test\" component={Test} />\n      {/*No path is needed to specify the not found page, since every misdirected clicking would lead there*/}\n      <Route component={NotFound} />\n\n    </Switch>\n        \n      </div>\n\n      <multiplyByTwo/>\n\n\n    </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}